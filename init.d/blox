#!/bin/bash

# chkconfig: 345 64 35
### BEGIN INIT INFO
# Provides: blox
# Required-Start:    mysqld
# Required-Stop:
# Default-Start:     3 4 5
# Default-Stop:      0 1 2 6
# Short-Description: Blox utils 
# Description: Blox Utils and Scripts
### END INIT INFO


# Source function library
if [ -e /etc/init.d/functions ]; then
. /etc/init.d/functions
DAEMON=daemon
STATUS=status
fi
if [ -e "/lib/lsb/init-functions" ]; then
. /lib/lsb/init-functions
DAEMON=start_daemon
STATUS=status_of_proc
fi

bloxngxdir=/usr/local/ngx-blox/
rundir=$bloxngxdir/run
logdir=$bloxngxdir/logs

export PATH=$PATH:/usr/local/sbin/
export STARTOPTIONS="-m512 -M32"


#DEBFAULT START STOP PRESENCE SCRIPTS
if [ -z "$PRESENCE_START" ]; then
PRESENCE_START=no
fi
if [ -z "$PRESENCE_STOP" ]; then
PRESENCE_STOP=yes
fi

SEND_NOTIFY_PIDFILE=/var/run/send_notify.sh.pid
LISTEN_SUBSCRIBE_PIDFILE=/var/run/listen_subscribe.sh.pid

start_opensips() {
    opensipsctl start
}

stop_opensips() {
    opensipsctl stop
    source /usr/local/etc/opensips/opensipsctlrc

    #Remove the TLS and TCP connection state from the DB, as they become invalid, need re-registeration from SIP client
    mysql -u $DBRWUSER --password=$DBRWPW $DBNAME -e "DELETE FROM locationtrunk      WHERE contact like '%transport=tls%';"
    mysql -u $DBRWUSER --password=$DBRWPW $DBNAME -e "DELETE FROM locationtrunk      WHERE contact like '%transport=tcp%';"

    mysql -u $DBRWUSER --password=$DBRWPW $DBNAME -e "DELETE FROM locationpbx        WHERE contact like '%transport=tls%';"
    mysql -u $DBRWUSER --password=$DBRWPW $DBNAME -e "DELETE FROM locationpbx        WHERE contact like '%transport=tcp%';"

    mysql -u $DBRWUSER --password=$DBRWPW $DBNAME -e "DELETE FROM locationpresence   WHERE contact like '%transport=tls%';"
    mysql -u $DBRWUSER --password=$DBRWPW $DBNAME -e "DELETE FROM locationpresence   WHERE contact like '%transport=tcp%';"

    timeout 5 bash <<EOS
while [ -f /var/run/opensips.pid ]; do
        sleep 1
done
EOS
}

restart_opensips() {
    opensipsctl restart
}

status_opensips() {
    opensipsctl fifo get_statistics rcv_requests
    opensipsctl fifo get_statistics shmem:
}

setup_opensips() {
    ubuntu=$(python -mplatform | grep -i ubuntu)
    if [ -n "$ubuntu" ]
    then
    	update-rc.d mysql defaults
    	/etc/init.d/mysql start
    else
    	/sbin/chkconfig mysqld --add
    	/sbin/chkconfig --level 345 mysqld on
    	/etc/init.d/mysqld start
    fi
    source /usr/local/etc/opensips/opensipsctlrc

    OPENSIPS_DBVER=$(mysql -u $DBRWUSER --password=$DBRWPW -e "show databases" | grep "^opensips_" | head -1 | sed 's/^opensips_//')
    if [ -n "$OPENSIPS_DBVER" ] ; then
        BLOX_MIGRATE=$(cat /etc/.blox_migrate)
        /usr/bin/blox_db_install.sh $OPENSIPS_DBVER $BLOX_MIGRATE
    else
        /usr/bin/blox_db_install.sh
    fi
    
    rm /etc/.blox_setup
    rm /etc/.blox_migrate
}

start_blox() {
	mkdir -p $rundir $logdir
	if [ "x$PRESENCE_START" = "xyes" ]; then
	/usr/local/ngx-blox/sbin/nginx 1>>$logdir/nginx-blox.startup 2>&1 
	if [ $? -eq 0 ]; then
		echo -e "\e[1;32mngx-blox Server Started... \e[0m"
	else
		echo -e "\e[1;31mngx-blox Server Failed to Start... \e[0m"
	fi

	nohup /usr/bin/send_notify.sh      1>>/var/log/send_notify.log 2>&1 &
	if [ $? -eq 0 ]; then
		echo -e "\e[1;32mNotify Server Started... \e[0m"
	else
		echo -e "\e[1;31mNotify Server Failed to Start... \e[0m"
	fi
	nohup /usr/bin/listen_subscribe.sh 1>>/var/log/listen_subscribe.log 2>&1 &
	if [ $? -eq 0 ]; then
		echo -e "\e[1;32mSubscribe Server Started... \e[0m"
	else
		echo -e "\e[1;31mSubscribe Server Failed to Start... \e[0m"
	fi
	fi
}

stop_blox() {
	if [ "x$PRESENCE_STOP" = "xyes" ]; then
	if [ -f $rundir/nginx.pid ]
	then
		kill $(cat $rundir/nginx.pid)
		if [ $? -eq 0 ]; then
			echo -e "\e[1;32mngx-blox Server Stopped... \e[0m"
		else
			echo -e "\e[1;31mngx-blox Server Failed to Stop... \e[0m"
		fi
	fi

	SEND_NOTIFY_PID=$(cat $SEND_NOTIFY_PIDFILE)
	LISTEN_SUBSCRIBE_PID=$(cat $LISTEN_SUBSCRIBE_PIDFILE)
	ret=-1

	if [ -n "$SEND_NOTIFY_PIDFILE" ]; then
	for npid in $(ps -eo pid,ppid | grep -w $SEND_NOTIFY_PID | grep -v grep | awk '{print $1}')
	do
		kill $npid
		ret=$?
	done
	if [ $ret -eq 0 ]; then
		echo -e "\e[1;32mNotify Server Stopped... \e[0m"
		rm -f $SEND_NOTIFY_PIDFILE ;
	else
		echo -e "\e[1;31mNotify Server Failed to Stop... \e[0m"
	fi
	fi
	
	if [ -n "$LISTEN_SUBSCRIBE_PID" ]; then
	for spid in $(ps -eo pid,ppid | grep -w $LISTEN_SUBSCRIBE_PID | grep -v grep | awk '{print $1}')
	do
		kill $spid
		ret=$?
	done
	if [ $ret -eq 0 ]; then
		echo -e "\e[1;32mSubscribe Server Stopped... \e[0m"
		rm -f $LISTEN_SUBSCRIBE_PIDFILE;
	else
		echo -e "\e[1;31mSubscribe Server Failed to Stop... \e[0m"
	fi
	fi
	fi
}

restart_blox() {
	stop_blox
	start_blox
}

status_blox() {
	if [ -f $rundir/nginx.pid ]
	then
		PID=$(cat $rundir/nginx.pid)
	fi
	if [ -n "$PID" ]
	then
		echo -e "\e[1;32mngx-blox Server Running ... $PID\e[0m"
	else
		echo -e "\e[1;31mngx-blox Server Not Running ... \e[0m"
	fi	
	
	SEND_NOTIFY_PID=$(cat $SEND_NOTIFY_PIDFILE)
	LISTEN_SUBSCRIBE_PID=$(cat $LISTEN_SUBSCRIBE_PIDFILE)

	INSTANTS=$(ps -eo pid,ppid | grep -w $SEND_NOTIFY_PID | grep -v grep | wc -l)
	if [ $INSTANTS -eq 3 ]; then
		echo -e "\e[1;32mNotify Server Running ... $SEND_NOTIFY_PID\e[0m"
	else
		echo -e "\e[1;31mNotify Server Not Running ... \e[0m"
	fi
	INSTANTS=$(ps -eo pid,ppid | grep -w $LISTEN_SUBSCRIBE_PID | grep -v grep | wc -l)
	if [ $INSTANTS -eq 2 ]; then
		echo -e "\e[1;32mSubscribe Server Running ... $LISTEN_SUBSCRIBE_PID\e[0m"
	else
		echo -e "\e[1;31mSubscribe Server Not Running ... \e[0m"
	fi
}


usage() {
  echo "usage: $0 [start|stop|restart|status]" >&2;
}

case "$1" in
start)
	start_blox
	if [ -f /etc/.blox_setup ]
	then
	    setup_opensips;
	    rm -f /etc/.blox_setup
	fi
	start_opensips;
	;;
stop)
	stop_blox;
	stop_opensips;
	;;
restart)
	restart_blox;
	restart_opensips;
	;;
status)
	status_blox;
	status_opensips;
	;;
*)
	usage;
	;;
esac
